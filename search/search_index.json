{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion describes the motion of an object launched into the air under the influence of gravity, assuming no air resistance. The path followed is a parabola. Let\u2019s consider an object projected with initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal: Horizontal motion: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical motion: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Where: \\( v_0 \\) is the initial velocity, \\( \\theta \\) is the angle of projection, \\( g \\) is gravitational acceleration (9.8 m/s \\(^2\\) ), \\( t \\) is time. The range \\( R \\) of the projectile is the horizontal distance it travels before hitting the ground again. When launched from ground level and landing at the same height, the total time of flight is: \\[ T = \\frac{2v_0 \\sin(\\theta)}{g} \\] \ud83d\udca1 Why Capital T? - Capital T is conventionally used to represent a total or final time \u2014 for example, the entire duration from launch to landing. - Lowercase t usually represents time as a variable, like time at any given moment during the motion. So, in projectile motion: - t \u2192 any time during the motion (like \u201cat 2 seconds\u201d) - T \u2192 total time the object is in the air (from launch to landing) Example: \u2022 The vertical position: y(t)=v0sin\u2061(\u03b8)\u22c5t\u221212gt2y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 (Here tt is changing continuously) \u2022 But to find when the projectile lands, we solve for the total time \u2192 that\u2019s when we use TT: T=2v0sin\u2061(\u03b8)gT = \\frac{2v_0 \\sin(\\theta)}{g} Summary: Symbol Meaning tt Any time during motion TT Total time of flight If you prefer to keep it lowercase for consistency, that's okay too \u2014 just be clear about what it represents. But using capital TT is quite common and makes the meaning clearer in scientific writing. Plugging this into the horizontal equation, we get the range formula : \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This formula shows: The range is maximum when \\( \\sin(2\\theta) = 1 \\) , which occurs at \\( \\theta = 45^\\circ \\) . For every angle \\( \\theta \\) , there is a complementary angle \\( 90^\\circ - \\theta \\) that produces the same range. Important : The range is maximum when \\( \\sin(2\\theta) = 1 \\) \\(\\rightarrow\\) \\( \\theta = 45^\\circ \\) 2. Analysis of the Range The range of a projectile depends on several factors: Angle of Projection : The range increases as the angle rises from 0\u00b0 to 45\u00b0, reaching a maximum at 45\u00b0, and then decreases symmetrically up to 90\u00b0. At 0\u00b0 or 90\u00b0 , the range is zero . Maximum range occurs at 45\u00b0 . Initial Velocity \\(v_0\\) : The range is proportional to the square of the initial speed: $$ R \\propto v_0^2 $$ Doubling the speed results in four times the range. Gravitational Acceleration \\( g \\) : A higher gravitational force reduces the range. For example, under stronger gravity (like on Jupiter), the same launch would travel a shorter distance. To visualize these effects, I wrote a Python script that: Simulates projectile motion across angles from 0\u00b0 to 90\u00b0 Allows adjustment of \\( v_0 \\) and \\( g \\) Plots Range vs. Angle for different values of initial velocity The resulting graph confirms theoretical predictions: a symmetric curve peaking at 45\u00b0 , clearly showing how both angle and velocity influence range. 3. Practical Applications The ideal model described above assumes: No air resistance Flat terrain Launch and landing at the same height In real-world situations, these assumptions rarely hold. For example: Sports : In games like soccer, golf, or basketball, air resistance significantly affects the projectile's trajectory. Engineering : When launching objects from a catapult or cannon, factors like air drag and varying terrain must be accounted for. Astrophysics : Spacecraft trajectories are influenced by gravitational variations and other forces. Military : Ballistics and targeting systems must consider the impact of wind resistance and the curvature of the Earth. These real-world factors can be addressed by more complex models, such as: Drag force : $$ F_d = \\frac{1}{2} C_d \\rho A v^2 $$ where \\( C_d \\) is the drag coefficient, \\( \\rho \\) is the air density, \\( A \\) is the cross-sectional area, and \\( v \\) is the velocity. Numerical methods to approximate motion, especially when analytical solutions are not feasible. Despite these complexities, the basic idealized model remains a powerful starting point for understanding projectile motion, providing valuable insights into both simple and advanced systems. 4. Implementation (Python Script) The simulation was implemented using Python and Matplotlib. The script computes the projectile's range over angles from 0\u00b0 to 90\u00b0 and generates a visual plot to illustrate the results. Key features: Adjustable parameters like initial speed and gravity Graphical output of Range vs. Angle Ability to compare curves for multiple initial speeds This visualization clearly shows how the peak and shape of the range curve change based on launch speed and gravitational acceleration. A basic implementation using Matplotlib and NumPy is provided below. import numpy as np import matplotlib.pyplot as plt g = 9.8 # Gravitational acceleration (m/s^2) def calculate_range(v0, angle_deg): angle_rad = np.radians(angle_deg) R = (v0**2 * np.sin(2 * angle_rad)) / g return R v0_values = [10, 20, 30, 40] angles = np.linspace(0, 90, 500) plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ranges, label=f\"v0 = {v0} m/s\") plt.title(\"Range vs Angle of Projection\") plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (meters)\") plt.legend() plt.grid(True) plt.show() 5. Limitations and Improvements While this project captures the essential behavior of projectile motion, it doesn't account for: Assumes no air resistance (idealized). Assumes flat terrain. Wind, spin, and shape of the projectile can significantly affect the real path. In real-world applications, numerical simulations or empirical data are needed. In future versions, the model could be extended with numerical simulation using tools like Euler's method or integrating drag forces. Additionally, a 3D version could simulate real terrain or moving targets. Conclusion This project offers both theoretical and visual insight into how the angle of projection affects the range of a projectile. Using fundamental equations of motion and simple Python code, we can clearly observe the mathematical beauty and real-world relevance of projectile motion.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion describes the motion of an object launched into the air under the influence of gravity, assuming no air resistance. The path followed is a parabola. Let\u2019s consider an object projected with initial velocity \\( v_0 \\) at an angle \\( \\theta \\) from the horizontal: Horizontal motion: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical motion: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ Where: \\( v_0 \\) is the initial velocity, \\( \\theta \\) is the angle of projection, \\( g \\) is gravitational acceleration (9.8 m/s \\(^2\\) ), \\( t \\) is time. The range \\( R \\) of the projectile is the horizontal distance it travels before hitting the ground again. When launched from ground level and landing at the same height, the total time of flight is: \\[ T = \\frac{2v_0 \\sin(\\theta)}{g} \\] \ud83d\udca1 Why Capital T? - Capital T is conventionally used to represent a total or final time \u2014 for example, the entire duration from launch to landing. - Lowercase t usually represents time as a variable, like time at any given moment during the motion. So, in projectile motion: - t \u2192 any time during the motion (like \u201cat 2 seconds\u201d) - T \u2192 total time the object is in the air (from launch to landing) Example: \u2022 The vertical position: y(t)=v0sin\u2061(\u03b8)\u22c5t\u221212gt2y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 (Here tt is changing continuously) \u2022 But to find when the projectile lands, we solve for the total time \u2192 that\u2019s when we use TT: T=2v0sin\u2061(\u03b8)gT = \\frac{2v_0 \\sin(\\theta)}{g} Summary: Symbol Meaning tt Any time during motion TT Total time of flight If you prefer to keep it lowercase for consistency, that's okay too \u2014 just be clear about what it represents. But using capital TT is quite common and makes the meaning clearer in scientific writing. Plugging this into the horizontal equation, we get the range formula : \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This formula shows: The range is maximum when \\( \\sin(2\\theta) = 1 \\) , which occurs at \\( \\theta = 45^\\circ \\) . For every angle \\( \\theta \\) , there is a complementary angle \\( 90^\\circ - \\theta \\) that produces the same range. Important : The range is maximum when \\( \\sin(2\\theta) = 1 \\) \\(\\rightarrow\\) \\( \\theta = 45^\\circ \\)","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range of a projectile depends on several factors: Angle of Projection : The range increases as the angle rises from 0\u00b0 to 45\u00b0, reaching a maximum at 45\u00b0, and then decreases symmetrically up to 90\u00b0. At 0\u00b0 or 90\u00b0 , the range is zero . Maximum range occurs at 45\u00b0 . Initial Velocity \\(v_0\\) : The range is proportional to the square of the initial speed: $$ R \\propto v_0^2 $$ Doubling the speed results in four times the range. Gravitational Acceleration \\( g \\) : A higher gravitational force reduces the range. For example, under stronger gravity (like on Jupiter), the same launch would travel a shorter distance. To visualize these effects, I wrote a Python script that: Simulates projectile motion across angles from 0\u00b0 to 90\u00b0 Allows adjustment of \\( v_0 \\) and \\( g \\) Plots Range vs. Angle for different values of initial velocity The resulting graph confirms theoretical predictions: a symmetric curve peaking at 45\u00b0 , clearly showing how both angle and velocity influence range.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"The ideal model described above assumes: No air resistance Flat terrain Launch and landing at the same height In real-world situations, these assumptions rarely hold. For example: Sports : In games like soccer, golf, or basketball, air resistance significantly affects the projectile's trajectory. Engineering : When launching objects from a catapult or cannon, factors like air drag and varying terrain must be accounted for. Astrophysics : Spacecraft trajectories are influenced by gravitational variations and other forces. Military : Ballistics and targeting systems must consider the impact of wind resistance and the curvature of the Earth. These real-world factors can be addressed by more complex models, such as: Drag force : $$ F_d = \\frac{1}{2} C_d \\rho A v^2 $$ where \\( C_d \\) is the drag coefficient, \\( \\rho \\) is the air density, \\( A \\) is the cross-sectional area, and \\( v \\) is the velocity. Numerical methods to approximate motion, especially when analytical solutions are not feasible. Despite these complexities, the basic idealized model remains a powerful starting point for understanding projectile motion, providing valuable insights into both simple and advanced systems.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-script","text":"The simulation was implemented using Python and Matplotlib. The script computes the projectile's range over angles from 0\u00b0 to 90\u00b0 and generates a visual plot to illustrate the results. Key features: Adjustable parameters like initial speed and gravity Graphical output of Range vs. Angle Ability to compare curves for multiple initial speeds This visualization clearly shows how the peak and shape of the range curve change based on launch speed and gravitational acceleration. A basic implementation using Matplotlib and NumPy is provided below. import numpy as np import matplotlib.pyplot as plt g = 9.8 # Gravitational acceleration (m/s^2) def calculate_range(v0, angle_deg): angle_rad = np.radians(angle_deg) R = (v0**2 * np.sin(2 * angle_rad)) / g return R v0_values = [10, 20, 30, 40] angles = np.linspace(0, 90, 500) plt.figure(figsize=(10, 6)) for v0 in v0_values: ranges = [calculate_range(v0, angle) for angle in angles] plt.plot(angles, ranges, label=f\"v0 = {v0} m/s\") plt.title(\"Range vs Angle of Projection\") plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (meters)\") plt.legend() plt.grid(True) plt.show()","title":"4. Implementation (Python Script)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-and-improvements","text":"While this project captures the essential behavior of projectile motion, it doesn't account for: Assumes no air resistance (idealized). Assumes flat terrain. Wind, spin, and shape of the projectile can significantly affect the real path. In real-world applications, numerical simulations or empirical data are needed. In future versions, the model could be extended with numerical simulation using tools like Euler's method or integrating drag forces. Additionally, a 3D version could simulate real terrain or moving targets.","title":"5. Limitations and Improvements"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This project offers both theoretical and visual insight into how the angle of projection affects the range of a projectile. Using fundamental equations of motion and simple Python code, we can clearly observe the mathematical beauty and real-world relevance of projectile motion.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation Governing Equation The motion of a forced damped pendulum is described by the second-order, nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) : Angular displacement at time \\(t\\) - \\(\\gamma\\) : Damping coefficient (e.g., due to air resistance or friction) - \\(\\omega_0 = \\sqrt{g/L}\\) : Natural frequency of the pendulum, depending on gravity and pendulum length - \\(A\\) : Amplitude of the driving force - \\(\\omega\\) : Frequency of the driving force This equation is nonlinear because of the \\(\\sin(\\theta)\\) term, making analytical solutions difficult or impossible for most cases. Small-Angle Approximation When the angular displacement is small ( \\(|\\theta| < 15^\\circ\\) ), we can simplify the equation by approximating \\(\\sin(\\theta) \\approx \\theta\\) : \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] This transforms the equation into a linear second-order differential equation similar to the driven harmonic oscillator, for which solutions are well-known. The steady-state solution takes the form: \\[ \\theta(t) = \\theta_0 \\cos(\\omega t - \\phi) \\] Where \\(\\theta_0\\) is the amplitude and \\(\\phi\\) is the phase shift. This linear model helps us understand the resonance condition when \\(\\omega \\approx \\omega_0\\) , where the system absorbs the most energy and the oscillations grow in amplitude. \u26a0\ufe0f Beyond Small Angles: Nonlinear Effects As the angle increases, the linear approximation fails. The full nonlinear system shows: - Amplitude saturation : Increasing drive no longer increases amplitude linearly. - Bifurcations : Small parameter changes can lead to dramatic changes in behavior. - Chaotic dynamics : Highly sensitive dependence on initial conditions. 2. Analysis of Dynamics Parameter Sensitivity We explore the effect of varying: Damping ( \\(\\gamma\\) ) : Controls energy dissipation. Higher damping suppresses oscillation amplitude and delays onset of chaos. Driving amplitude (A) : Low amplitude \u2192 regular motion; high amplitude \u2192 complex or chaotic motion. Driving frequency ( \\(\\omega\\) ) : Determines resonance and synchronization conditions. Periodic vs. Chaotic Motion Periodic motion : Oscillations repeat over time, clearly visible in time plots and Poincar\u00e9 sections. Quasiperiodic motion : Two or more incommensurate frequencies interacting. Chaotic motion : Aperiodic, sensitive to initial conditions, and unpredictable despite deterministic equations. Chaotic regimes can be diagnosed using: - Phase space plots : Reveal attractor shapes. - Poincar\u00e9 sections : Discrete snapshots each drive cycle, showing the transition to chaos. - Bifurcation diagrams : Reveal how long-term behavior changes with a parameter (e.g., A or \\(\\omega\\) ). 3. Real-World Applications Mechanical Systems Suspension bridges : Forced by wind, cars \u2014 nonlinear dynamics can cause resonant collapses (e.g., Tacoma Narrows Bridge). Shock absorbers : Modeled as damped oscillators in cars and aircraft. Electrical Circuits Driven RLC circuits are analogs of the forced damped pendulum, with current as the analog of angular velocity. Signal processing and resonance tuning use the same mathematics. Energy Harvesting Devices use environmental vibrations to generate electricity (e.g., from human motion, sea waves). Operating at resonance increases efficiency. Biological Systems The gait cycle of walking/running resembles a forced oscillator. Even heart rhythms and circadian clocks show resonance-like behavior. 4. Python Simulation & Visualizations We simulate the system using the Runge-Kutta 4th order method for accurate time-stepping of the nonlinear differential equation. \ud83d\udccc Included outputs: - Time evolution of \\(\\theta(t)\\) - Phase space: \\(\\omega\\) vs. \\(\\theta\\) - Poincar\u00e9 section sampled every driving period import numpy as np import matplotlib.pyplot as plt # Parameters gamma = 0.2 # Damping coefficient omega_0 = 1.5 # Natural frequency A = 1.2 # Driving amplitude Omega = 2/3 # Driving frequency dt = 0.01 # Time step T = 500 # Total time steps = int(T/dt) # Initial conditions theta = 0.2 omega = 0.0 t = 0.0 # Data storage theta_list = [] omega_list = [] time_list = [] poincare_theta = [] poincare_omega = [] # Driving period for sampling drive_period = (2 * np.pi) / Omega sample_interval = int(drive_period / dt) # Derivatives def derivatives(theta, omega, t): dtheta_dt = omega domega_dt = -gamma * omega - omega_0**2 * np.sin(theta) + A * np.cos(Omega * t) return dtheta_dt, domega_dt # Runge-Kutta 4th order method for i in range(steps): time_list.append(t) theta_list.append(theta) omega_list.append(omega) if i % sample_interval == 0: poincare_theta.append(theta) poincare_omega.append(omega) k1_theta, k1_omega = derivatives(theta, omega, t) k2_theta, k2_omega = derivatives(theta + 0.5*dt*k1_theta, omega + 0.5*dt*k1_omega, t + 0.5*dt) k3_theta, k3_omega = derivatives(theta + 0.5*dt*k2_theta, omega + 0.5*dt*k2_omega, t + 0.5*dt) k4_theta, k4_omega = derivatives(theta + dt*k3_theta, omega + dt*k3_omega, t + dt) theta += (dt/6)*(k1_theta + 2*k2_theta + 2*k3_theta + k4_theta) omega += (dt/6)*(k1_omega + 2*k2_omega + 2*k3_omega + k4_omega) t += dt # Keep theta between -pi and pi if theta > np.pi: theta -= 2 * np.pi elif theta < -np.pi: theta += 2 * np.pi # Time evolution plot plt.figure(figsize=(10, 4)) plt.plot(time_list, theta_list, label='\u03b8(t)') plt.xlabel('Time') plt.ylabel('Angle \u03b8 (rad)') plt.title('Time Evolution of the Forced Damped Pendulum') plt.grid(True) plt.legend() plt.show() # Phase portrait plt.figure(figsize=(6, 6)) plt.plot(theta_list, omega_list, linewidth=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('\u03c9 (rad/s)') plt.title('Phase Portrait') plt.grid(True) plt.show() # Poincar\u00e9 section plt.figure(figsize=(6, 6)) plt.scatter(poincare_theta, poincare_omega, s=1, color='red') plt.xlabel('\u03b8 (rad)') plt.ylabel('\u03c9 (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid(True) plt.show() OUTPUT : Results & Interpretations The time series plot shows how the angle evolves over time \u2014 regular, modulated, or chaotic. The phase space plot reveals attractor structure \u2014 periodic loops or scattered points. The Poincar\u00e9 section helps distinguish periodic from chaotic regimes: points on a curve vs. scattered clouds. Changing driving amplitude from 1.0 to 1.5 and frequency from 2/3 to 1.0 can lead to bifurcation and even full chaos. Limitations & Extensions Limitations Assumes fixed-length, frictionless pivot. External force modeled as strictly sinusoidal. No coupling with other systems (single pendulum only). Extensions Add nonlinear damping (e.g., quadratic air resistance). Use stochastic or impulse-based driving forces. Simulate coupled pendulums or arrays to model synchronization. Explore Lyapunov exponents to quantify chaos. Conclusion The forced damped pendulum beautifully illustrates the deep connection between simple physical laws and rich, sometimes unpredictable behaviors. Through mathematical modeling and simulation, we see how systems transition from harmony to chaos, with profound implications across disciplines. This study not only enhances our understanding of dynamic systems but also equips us to better design, control, and analyze critical real-world technologies.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The motion of a forced damped pendulum is described by the second-order, nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: - \\(\\theta(t)\\) : Angular displacement at time \\(t\\) - \\(\\gamma\\) : Damping coefficient (e.g., due to air resistance or friction) - \\(\\omega_0 = \\sqrt{g/L}\\) : Natural frequency of the pendulum, depending on gravity and pendulum length - \\(A\\) : Amplitude of the driving force - \\(\\omega\\) : Frequency of the driving force This equation is nonlinear because of the \\(\\sin(\\theta)\\) term, making analytical solutions difficult or impossible for most cases.","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"When the angular displacement is small ( \\(|\\theta| < 15^\\circ\\) ), we can simplify the equation by approximating \\(\\sin(\\theta) \\approx \\theta\\) : \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] This transforms the equation into a linear second-order differential equation similar to the driven harmonic oscillator, for which solutions are well-known. The steady-state solution takes the form: \\[ \\theta(t) = \\theta_0 \\cos(\\omega t - \\phi) \\] Where \\(\\theta_0\\) is the amplitude and \\(\\phi\\) is the phase shift. This linear model helps us understand the resonance condition when \\(\\omega \\approx \\omega_0\\) , where the system absorbs the most energy and the oscillations grow in amplitude.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#beyond-small-angles-nonlinear-effects","text":"As the angle increases, the linear approximation fails. The full nonlinear system shows: - Amplitude saturation : Increasing drive no longer increases amplitude linearly. - Bifurcations : Small parameter changes can lead to dramatic changes in behavior. - Chaotic dynamics : Highly sensitive dependence on initial conditions.","title":"\u26a0\ufe0f Beyond Small Angles: Nonlinear Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-sensitivity","text":"We explore the effect of varying: Damping ( \\(\\gamma\\) ) : Controls energy dissipation. Higher damping suppresses oscillation amplitude and delays onset of chaos. Driving amplitude (A) : Low amplitude \u2192 regular motion; high amplitude \u2192 complex or chaotic motion. Driving frequency ( \\(\\omega\\) ) : Determines resonance and synchronization conditions.","title":"Parameter Sensitivity"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#periodic-vs-chaotic-motion","text":"Periodic motion : Oscillations repeat over time, clearly visible in time plots and Poincar\u00e9 sections. Quasiperiodic motion : Two or more incommensurate frequencies interacting. Chaotic motion : Aperiodic, sensitive to initial conditions, and unpredictable despite deterministic equations. Chaotic regimes can be diagnosed using: - Phase space plots : Reveal attractor shapes. - Poincar\u00e9 sections : Discrete snapshots each drive cycle, showing the transition to chaos. - Bifurcation diagrams : Reveal how long-term behavior changes with a parameter (e.g., A or \\(\\omega\\) ).","title":"Periodic vs. Chaotic Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-real-world-applications","text":"Mechanical Systems Suspension bridges : Forced by wind, cars \u2014 nonlinear dynamics can cause resonant collapses (e.g., Tacoma Narrows Bridge). Shock absorbers : Modeled as damped oscillators in cars and aircraft. Electrical Circuits Driven RLC circuits are analogs of the forced damped pendulum, with current as the analog of angular velocity. Signal processing and resonance tuning use the same mathematics. Energy Harvesting Devices use environmental vibrations to generate electricity (e.g., from human motion, sea waves). Operating at resonance increases efficiency. Biological Systems The gait cycle of walking/running resembles a forced oscillator. Even heart rhythms and circadian clocks show resonance-like behavior.","title":"3. Real-World Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-python-simulation-visualizations","text":"We simulate the system using the Runge-Kutta 4th order method for accurate time-stepping of the nonlinear differential equation. \ud83d\udccc Included outputs: - Time evolution of \\(\\theta(t)\\) - Phase space: \\(\\omega\\) vs. \\(\\theta\\) - Poincar\u00e9 section sampled every driving period import numpy as np import matplotlib.pyplot as plt # Parameters gamma = 0.2 # Damping coefficient omega_0 = 1.5 # Natural frequency A = 1.2 # Driving amplitude Omega = 2/3 # Driving frequency dt = 0.01 # Time step T = 500 # Total time steps = int(T/dt) # Initial conditions theta = 0.2 omega = 0.0 t = 0.0 # Data storage theta_list = [] omega_list = [] time_list = [] poincare_theta = [] poincare_omega = [] # Driving period for sampling drive_period = (2 * np.pi) / Omega sample_interval = int(drive_period / dt) # Derivatives def derivatives(theta, omega, t): dtheta_dt = omega domega_dt = -gamma * omega - omega_0**2 * np.sin(theta) + A * np.cos(Omega * t) return dtheta_dt, domega_dt # Runge-Kutta 4th order method for i in range(steps): time_list.append(t) theta_list.append(theta) omega_list.append(omega) if i % sample_interval == 0: poincare_theta.append(theta) poincare_omega.append(omega) k1_theta, k1_omega = derivatives(theta, omega, t) k2_theta, k2_omega = derivatives(theta + 0.5*dt*k1_theta, omega + 0.5*dt*k1_omega, t + 0.5*dt) k3_theta, k3_omega = derivatives(theta + 0.5*dt*k2_theta, omega + 0.5*dt*k2_omega, t + 0.5*dt) k4_theta, k4_omega = derivatives(theta + dt*k3_theta, omega + dt*k3_omega, t + dt) theta += (dt/6)*(k1_theta + 2*k2_theta + 2*k3_theta + k4_theta) omega += (dt/6)*(k1_omega + 2*k2_omega + 2*k3_omega + k4_omega) t += dt # Keep theta between -pi and pi if theta > np.pi: theta -= 2 * np.pi elif theta < -np.pi: theta += 2 * np.pi # Time evolution plot plt.figure(figsize=(10, 4)) plt.plot(time_list, theta_list, label='\u03b8(t)') plt.xlabel('Time') plt.ylabel('Angle \u03b8 (rad)') plt.title('Time Evolution of the Forced Damped Pendulum') plt.grid(True) plt.legend() plt.show() # Phase portrait plt.figure(figsize=(6, 6)) plt.plot(theta_list, omega_list, linewidth=0.5) plt.xlabel('\u03b8 (rad)') plt.ylabel('\u03c9 (rad/s)') plt.title('Phase Portrait') plt.grid(True) plt.show() # Poincar\u00e9 section plt.figure(figsize=(6, 6)) plt.scatter(poincare_theta, poincare_omega, s=1, color='red') plt.xlabel('\u03b8 (rad)') plt.ylabel('\u03c9 (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid(True) plt.show()","title":"4. Python Simulation &amp; Visualizations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#output","text":"","title":"OUTPUT :"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#results-interpretations","text":"The time series plot shows how the angle evolves over time \u2014 regular, modulated, or chaotic. The phase space plot reveals attractor structure \u2014 periodic loops or scattered points. The Poincar\u00e9 section helps distinguish periodic from chaotic regimes: points on a curve vs. scattered clouds. Changing driving amplitude from 1.0 to 1.5 and frequency from 2/3 to 1.0 can lead to bifurcation and even full chaos.","title":"Results &amp; Interpretations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations-extensions","text":"","title":"Limitations &amp; Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations","text":"Assumes fixed-length, frictionless pivot. External force modeled as strictly sinusoidal. No coupling with other systems (single pendulum only).","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#extensions","text":"Add nonlinear damping (e.g., quadratic air resistance). Use stochastic or impulse-based driving forces. Simulate coupled pendulums or arrays to model synchronization. Explore Lyapunov exponents to quantify chaos.","title":"Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusion","text":"The forced damped pendulum beautifully illustrates the deep connection between simple physical laws and rich, sometimes unpredictable behaviors. Through mathematical modeling and simulation, we see how systems transition from harmony to chaos, with profound implications across disciplines. This study not only enhances our understanding of dynamic systems but also equips us to better design, control, and analyze critical real-world technologies.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}